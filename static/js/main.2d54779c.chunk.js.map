{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["shuffleArray","arr","i","length","j","Math","floor","random","timeScale","x","round","sleep","ms","Promise","resolve","setImmediate","setTimeout","createArr","columnNbr","Array","keys","map","a","idx","id","App","props","drawDiff","i1","i2","state","isSorting","Error","context","canvasRef","current","getContext","clearColumn","drawColumn","drawAll","ctx","clearAll","clearRect","canvas","width","height","arrLength","startX","fillStyle","h","s","v","f","n","k","max","min","hex","toString","join","hsvToRgbHex","fillRect","startY","ctxHeight","sort","setState","sortingAlgorithms","chosenSortAlg","console","log","bubbleSort","isSorted","drawAndSwap","swapTime","insertionSort","lsdRadixSort","base","buckets","indexMap","Map","shift","index","push","currentIndex","bucket","swapIndex","msdRadixSort","start","end","bucketIndices","bucketStart","bucketEnd","selectionSort","curJ","cocktailShakerSort","shouldSortReversed","quickSort","mid","pivot","shellSort","gap","stopSorting","swap","toggleDisplaySettings","areSettingsOpen","closeDisplaySettings","chooseSortAlg","event","target","value","changeColumnNbr","shuffleAndDraw","changeSwapTime","resetAndDraw","drawOnCanvas","isDrawing","rect","getBoundingClientRect","clientX","left","clientY","top","prevDrawIndex","prevDrawHeight","indexIncr","sign","curHeight","abs","startDrawOnCanvas","canDraw","endDrawOnCanvas","toggleCanDraw","React","createRef","this","parent","document","getElementById","offsetWidth","offsetHeight","className","position","variant","color","onClick","disableElevation","control","checked","onChange","name","label","aria-label","edge","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","anchor","open","component","align","gutterBottom","Object","defaultValue","aria-labelledby","valueLabelDisplay","onChangeCommitted","step","scale","e","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2d54779c.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Switch from \"@material-ui/core/Switch\";\nimport \"./App.css\";\n\nconst swapTime = 0;\nconst initColumnNbr = 100;\n\nfunction shuffleArray(arr) {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n}\n\nconst timeScale = (x) => Math.round(2 ** x) - 1;\n\nconst sleep = (ms) => {\n  if (ms === 0) return new Promise((resolve) => setImmediate(resolve));\n\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nfunction hsvToRgbHex(h, s, v) {\n  let f = (n, k = (n + h / 60) % 6) =>\n    Math.round((v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)) * 255);\n\n  return (\n    \"#\" +\n    [f(5), f(3), f(1)]\n      .map((x) => {\n        const hex = x.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n      })\n      .join(\"\")\n  );\n}\n\nconst createArr = (columnNbr) => [...Array(columnNbr).keys()].map((a, idx) => { return {x: a, id: idx} })\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n\n    this.arr = createArr(initColumnNbr);\n    shuffleArray(this.arr);\n    this.state = {\n      isSorting: false,\n      areSettingsOpen: false,\n      chosenSortAlg: \"Insertion Sort\",\n      columnNbr: initColumnNbr,\n      swapTime: swapTime,\n      isDrawing: false,\n      canDraw: false,\n    };\n    this.sortingAlgorithms = {\n      \"Insertion Sort\": this.insertionSort,\n      \"Selection Sort\": this.selectionSort,\n      \"Cocktail Shaker Sort\": this.cocktailShakerSort,\n      \"Bubble Sort\": this.bubbleSort,\n      \"Radix Sort (LSD)\": this.lsdRadixSort,\n      \"Radix Sort (MSD)\": this.msdRadixSort,\n      \"Quick Sort\": this.quickSort,\n      \"Shell Sort\": this.shellSort\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    var parent = document.getElementById(\"canvas-wrapper\");\n\n    context.canvas.width = parent.offsetWidth;\n    context.canvas.height = parent.offsetHeight;\n\n    this.drawAll(context, this.arr);\n  }\n\n  drawDiff = (arr, i1, i2) => {\n    if (!this.state.isSorting) throw Error(\"isSorting is false!\");\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    this.clearColumn(context, i1);\n    this.drawColumn(context, arr, i1, i2);\n  };\n\n  drawAll = (ctx, arr) => {\n    for (let i = 0; i < arr.length; i++) {\n      this.drawColumn(ctx, arr, i, i);\n    }\n  };\n\n  clearAll = (ctx) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  drawColumn = (ctx, arr, i1, i2) => {\n    const arrLength = arr.length;\n    const width = ctx.canvas.width / this.state.columnNbr;\n    const height = (ctx.canvas.height / this.state.columnNbr) * (arr[i2].x + 1);\n    const startX = width * i1;\n\n    ctx.fillStyle = hsvToRgbHex((360 * arr[i2].x) / arrLength, 1, 1);\n    this.fillRect(ctx, startX, 0, width, height);\n  };\n\n  fillRect = (ctx, startX, startY, width, height) => {\n    const ctxHeight = ctx.canvas.height;\n    ctx.fillRect(\n      startX,\n      Math.floor(ctxHeight) - Math.floor(startY) - Math.floor(height),\n      Math.floor(width),\n      Math.floor(height)\n    );\n  };\n\n  clearColumn = (ctx, idx) => {\n    const width = ctx.canvas.width / this.state.columnNbr;\n    const startX = width * idx;\n\n    this.clearRect(ctx, startX, width);\n  };\n\n  clearRect = (ctx, startX, width) => {\n    const ctxHeight = ctx.canvas.height;\n    ctx.clearRect(startX - 1, 0, Math.floor(width) + 2, Math.floor(ctxHeight));\n  };\n\n  sort = async (arr) => {\n    if (this.state.isSorting) return;\n\n    this.setState({ isSorting: true }, async () => {\n      try {\n        await this.sortingAlgorithms[this.state.chosenSortAlg](arr);\n        this.setState({ isSorting: false });\n      } catch (e) {\n        console.log(\"Sorting interrupted! Reason: \" + e);\n        this.setState({ isSorting: false });\n      }\n    });\n  };\n\n  bubbleSort = async (arr) => {\n    var isSorted = false;\n    while (!isSorted) {\n      isSorted = true;\n      for (let i = 1; i < arr.length; i++) {\n        if (arr[i - 1].x > arr[i].x) {\n          this.drawAndSwap(arr, i - 1, i);\n          await sleep(this.state.swapTime);\n          isSorted = false;\n        }\n      }\n    }\n  };\n\n  insertionSort = async (arr) => {\n    var isSorted = false;\n    while (!isSorted) {\n      isSorted = true;\n      for (let i = 1; i < arr.length; i++) {\n        if (arr[i - 1].x > arr[i].x) {\n          this.drawAndSwap(arr, i - 1, i);\n          await sleep(this.state.swapTime);\n          isSorted = false;\n          break;\n        }\n      }\n    }\n  };\n\n  lsdRadixSort = async (arr, base = 4) => {\n    const buckets = Array(base);\n    const indexMap = new Map()\n    var shift = 0;\n    var isSorted = false;\n    while (!isSorted) {\n      for (let i = 0; i < base; i++) {\n        buckets[i] = [];\n      }\n      for (let i = 0; i < arr.length; i++) {\n        const index = (Math.floor(arr[i].x / base ** shift)) % base;\n        buckets[index].push(arr[i]);\n        indexMap[arr[i].id] = i\n      }\n      shift++;\n      var currentIndex = 0;\n\n      if (buckets[0].length === arr.length) {\n        break\n      }\n\n      for (let bucket of buckets) {\n        for (let a of bucket) {\n          const swapIndex = indexMap[a.id]\n          this.drawAndSwap(arr, currentIndex, swapIndex);\n          indexMap[arr[swapIndex].id] = indexMap[arr[currentIndex].id]\n          await sleep(this.state.swapTime);\n\n          currentIndex++;\n        }\n      }\n    }\n  };\n\n  msdRadixSort = async (\n    arr, \n    base = 4,\n    start = 0,\n    end = this.state.columnNbr,\n    shift = Math.floor(Math.log(this.state.columnNbr)/Math.log(base))\n  ) => {\n    const buckets = Array(base);\n    const indexMap = new Map()\n\n    if (end-start === 0) return\n\n    for (let i = 0; i < base; i++) {\n      buckets[i] = [];\n    }\n    for (let i = start; i < end; i++) {\n      const index = (Math.floor(arr[i].x / base ** shift)) % base;\n      buckets[index].push(arr[i]);\n      indexMap[arr[i].id] = i\n    }\n\n    const bucketIndices = []\n\n    var currentIndex = start;\n\n    for (let bucket of buckets) {\n      const bucketStart = currentIndex\n      for (let a of bucket) {\n        const swapIndex = indexMap[a.id]\n        this.drawAndSwap(arr, currentIndex, swapIndex);\n        indexMap[arr[swapIndex].id] = indexMap[arr[currentIndex].id]\n        await sleep(this.state.swapTime);\n\n        currentIndex++;\n      }\n      if (shift === 0) continue\n\n      bucketIndices.push([bucketStart, currentIndex])\n    }\n    for (const [bucketStart, bucketEnd] of bucketIndices) {\n      await this.msdRadixSort(arr, base, bucketStart, bucketEnd, shift-1)\n    }\n  };\n\n  selectionSort = async (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n      var curJ = i;\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j].x < arr[curJ].x) {\n          curJ = j;\n        }\n      }\n      if (curJ !== i) {\n        this.drawAndSwap(arr, curJ, i);\n        await sleep(this.state.swapTime);\n      }\n    }\n  };\n\n  cocktailShakerSort = async (arr) => {\n    var isSorted = false;\n    var shouldSortReversed = false;\n    while (!isSorted) {\n      isSorted = true;\n      if (shouldSortReversed) {\n        for (let i = 1; i < arr.length; i++) {\n          if (arr[i - 1].x > arr[i].x) {\n            this.drawAndSwap(arr, i - 1, i);\n            await sleep(this.state.swapTime);\n            isSorted = false;\n          }\n        }\n      } else {\n        for (let i = arr.length - 1; i > 0; i--) {\n          if (arr[i - 1].x > arr[i].x) {\n            this.drawAndSwap(arr, i - 1, i);\n            await sleep(this.state.swapTime);\n            isSorted = false;\n          }\n        }\n      }\n      shouldSortReversed = !shouldSortReversed;\n    }\n  };\n\n  //#region merge sort\n  /* In-place merge sort is complicated...\n  mergeSort = async (arr, start, end) => {\n    if (start >= end) return\n    if (end-start === 1) {\n      if (arr[start] > arr[end]) {\n        this.drawAndSwap(arr, start, end);\n        await sleep(this.state.swapTime);\n      }\n    }\n\n    const mid = Math.floor((start+end) / 2)\n    this.mergeSort(arr, start, mid)\n    this.mergeSort(arr, mid+1, end)\n    var i = start\n    var j = mid+1\n    while (i < mid && j < end) {\n      if (arr[i] > arr[j]) {\n        this.drawAndSwap(arr, i, j);\n        await sleep(this.state.swapTime);\n      }\n    }\n  }\n  */\n //#endregion\n\n  quickSort = async (arr, start = 0, end = this.state.columnNbr-1) => {\n    if (start >= end) return\n\n    const mid = Math.floor((start+end)/2)\n\n    if (arr[mid].x < arr[start].x) {\n      this.drawAndSwap(arr, start, mid)\n      await sleep(this.state.swapTime)  \n    }\n    if (arr[end].x < arr[start].x) {\n      this.drawAndSwap(arr, start, end)\n      await sleep(this.state.swapTime)  \n    }\n    if (arr[mid].x < arr[end].x) {\n      this.drawAndSwap(arr, mid, end)\n      await sleep(this.state.swapTime)  \n    }\n\n    const pivot = arr[end].x\n    var i = start\n    for (var j = start; j < end; j++) {\n      if (arr[j].x < pivot) {\n        this.drawAndSwap(arr, i, j)\n        await sleep(this.state.swapTime)\n        i++\n      }\n    }\n    this.drawAndSwap(arr, i, end)\n    await sleep(this.state.swapTime)\n\n    await this.quickSort(arr, start, i-1)\n    await this.quickSort(arr, i+1, end)\n  }\n\n  shellSort = async (arr) => {\n    const gaps = [701, 301, 132, 57, 23, 10, 4, 1] // from https://oeis.org/A102549\n    for (let gap of gaps) {\n      if (gap > this.state.columnNbr) continue\n      for (let i = gap; i < this.state.columnNbr; i++) {\n        for (let j = i; j >= gap; j -= gap) {\n          if (arr[j - gap].x > arr[j].x) {\n            this.drawAndSwap(arr, j - gap, j);\n            await sleep(this.state.swapTime);\n          }\n          else break\n        }\n      }\n    }\n  }\n\n  stopSorting = () => {\n    this.setState({ isSorting: false });\n  };\n\n  drawAndSwap = (arr, i1, i2) => {\n    this.drawDiff(arr, i1, i2);\n    this.drawDiff(arr, i2, i1);\n    this.swap(arr, i1, i2);\n  };\n\n  swap = (arr, i1, i2) => {\n    [arr[i1], arr[i2]] = [arr[i2], arr[i1]];\n  };\n\n  toggleDisplaySettings = () => {\n    this.setState({ areSettingsOpen: !this.state.areSettingsOpen });\n  };\n\n  closeDisplaySettings = () => {\n    this.setState({ areSettingsOpen: false });\n  };\n\n  chooseSortAlg = (event) => {\n    this.stopSorting();\n\n    this.setState({ chosenSortAlg: event.target.value });\n  };\n\n  changeColumnNbr = (event, value) => {\n    this.stopSorting();\n\n    this.arr = createArr(value);\n    this.setState({ columnNbr: value }, () => this.shuffleAndDraw());\n  };\n\n  changeSwapTime = (event, value) => {\n    this.setState({ swapTime: value });\n  };\n\n  resetAndDraw = () => {\n    this.arr = createArr(this.state.columnNbr);\n    this.shuffleAndDraw();\n  };\n\n  shuffleAndDraw = () => {\n    this.stopSorting();\n\n    shuffleArray(this.arr);\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    this.clearAll(context);\n    this.drawAll(context, this.arr);\n  };\n\n  drawOnCanvas = (event) => {\n    if (!this.state.isDrawing) return;\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n\n    const index = Math.floor(\n      ((event.clientX - rect.left) / canvas.width) * this.state.columnNbr\n    );\n    const height = Math.floor(\n      ((canvas.height - (event.clientY - rect.top)) / canvas.height) *\n        this.state.columnNbr\n    );\n\n    if (this.prevDrawIndex && this.prevDrawHeight) {\n      const indexIncr = Math.sign(index - this.prevDrawIndex);\n      let curHeight = this.prevDrawHeight;\n      for (\n        let i = this.prevDrawIndex + indexIncr;\n        i !== index;\n        i += indexIncr\n      ) {\n        curHeight +=\n          (height - this.prevDrawHeight) / Math.abs(index - this.prevDrawIndex);\n        this.arr[i].x = Math.round(curHeight);\n        this.clearColumn(context, i);\n        this.drawColumn(context, this.arr, i, i);\n      }\n    }\n\n    this.arr[index].x = height;\n    this.clearColumn(context, index);\n    this.drawColumn(context, this.arr, index, index);\n    this.prevDrawIndex = index;\n    this.prevDrawHeight = height;\n  };\n\n  startDrawOnCanvas = () => {\n    if (!this.state.canDraw) return;\n\n    this.stopSorting();\n    this.setState({ isDrawing: true });\n  };\n\n  endDrawOnCanvas = () => {\n    this.prevDrawIndex = null;\n    this.prevDrawHeight = null;\n    this.setState({ isDrawing: false });\n  };\n\n  toggleCanDraw = () => {\n    this.setState({ canDraw: !this.state.canDraw });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <AppBar position=\"relative\">\n            <Toolbar className=\"toolbar\">\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => this.sort(this.arr)}\n                  disableElevation\n                >\n                  Sort\n                </Button>\n              </div>\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={this.shuffleAndDraw}\n                  disableElevation\n                >\n                  Shuffle\n                </Button>\n              </div>\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={this.resetAndDraw}\n                  disableElevation\n                >\n                  Reset\n                </Button>\n              </div>\n              <div>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={this.state.canDraw}\n                      onChange={this.toggleCanDraw}\n                      name=\"canDraw\"\n                    />\n                  }\n                  label=\"Draw Mode\"\n                />\n              </div>\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                edge=\"end\"\n                className=\"open-drawer-button\"\n                onClick={this.toggleDisplaySettings}\n              >\n                <MenuIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n\n          <div\n            className=\"canvas-wrapper\"\n            id=\"canvas-wrapper\"\n            onClick={this.closeDisplaySettings}\n          >\n            <canvas\n              className=\"App-canvas\"\n              ref={this.canvasRef}\n              onMouseDown={this.startDrawOnCanvas}\n              onMouseMove={this.drawOnCanvas}\n              onMouseUp={this.endDrawOnCanvas}\n              onMouseLeave={this.endDrawOnCanvas}\n            />\n          </div>\n\n          <Drawer\n            variant=\"persistent\"\n            anchor=\"right\"\n            className=\"drawer\"\n            open={this.state.areSettingsOpen}\n          >\n            <div className=\"chevron-wrapper\">\n              <IconButton onClick={this.toggleDisplaySettings}>\n                <ChevronRightIcon />\n              </IconButton>\n            </div>\n            <div className=\"sortAlgChoice-wrapper\">\n              <FormControl component=\"fieldset\">\n                <Typography\n                  align=\"left\"\n                  variant=\"h6\"\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Sorting Algorithm\n                </Typography>\n                <RadioGroup\n                  className=\"choiceGroup\"\n                  aria-label=\"choiceGroup\"\n                  name=\"choiceGroup\"\n                  value={this.state.chosenSortAlg}\n                  onChange={this.chooseSortAlg}\n                >\n                  {Object.keys(this.sortingAlgorithms).map((v) => (\n                    <FormControlLabel\n                      className=\"choice\"\n                      value={v}\n                      key={v}\n                      control={<Radio />}\n                      label={v}\n                    />\n                  ))}\n                </RadioGroup>\n              </FormControl>\n            </div>\n            <div>\n              <Typography\n                align=\"left\"\n                variant=\"h6\"\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                # Columns\n              </Typography>\n              <div className=\"col-slider\">\n                <Slider\n                  defaultValue={initColumnNbr}\n                  aria-labelledby=\"discrete-slider\"\n                  valueLabelDisplay=\"auto\"\n                  min={10}\n                  max={1000}\n                  onChangeCommitted={this.changeColumnNbr}\n                />\n              </div>\n            </div>\n            <div>\n              <Typography\n                align=\"left\"\n                variant=\"h6\"\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                Time per swap (ms)\n              </Typography>\n              <div className=\"col-slider\">\n                <Slider\n                  defaultValue={swapTime}\n                  aria-labelledby=\"discrete-slider\"\n                  valueLabelDisplay=\"auto\"\n                  min={0}\n                  step={0.1}\n                  max={10}\n                  scale={(x) => timeScale(x)}\n                  onChangeCommitted={(e, value) =>\n                    this.changeSwapTime(e, timeScale(value))\n                  }\n                />\n              </div>\n            </div>\n          </Drawer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}