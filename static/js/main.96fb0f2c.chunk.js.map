{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["shuffleArray","arr","i","length","j","Math","floor","random","timeScale","x","round","sleep","ms","Promise","resolve","setImmediate","setTimeout","createArr","columnNbr","Array","keys","map","a","idx","id","App","props","removeHighlight","highlight","indices","state","isSorting","Error","context","canvasRef","current","getContext","prevHighlightIndices","drawDiff","clearColumn","drawColumn","i1","i2","drawAll","ctx","clearAll","clearRect","canvas","width","height","color","arrLength","startX","fillStyle","h","s","v","f","n","k","max","min","hex","toString","join","hsvToRgbHex","fillRect","startY","ctxHeight","sort","setState","sortingAlgorithms","chosenSortAlg","console","log","stopSorting","bubbleSort","isSorted","sortedCount","drawAndSwap","swapTime","combSort","gap","shrinkFactor","insertionSort","lsdRadixSort","base","buckets","indexMap","Map","shift","index","push","currentIndex","bucket","swapIndex","msdRadixSort","start","end","bucketIndices","bucketStart","bucketEnd","selectionSort","curJ","cocktailShakerSort","shouldSortReversed","sortedCountRight","sortedCountLeft","quickSort","mid","pivot","shellSort","swap","toggleDisplaySettings","areSettingsOpen","closeDisplaySettings","chooseSortAlg","event","target","value","changeColumnNbr","shuffleAndDraw","changeSwapTime","resetAndDraw","drawOnCanvas","isDrawing","rect","getBoundingClientRect","clientX","left","clientY","top","prevDrawIndex","prevDrawHeight","indexIncr","sign","curHeight","abs","startDrawOnCanvas","canDraw","endDrawOnCanvas","toggleCanDraw","React","createRef","this","parent","document","getElementById","offsetWidth","offsetHeight","className","position","variant","onClick","disableElevation","control","checked","onChange","name","label","aria-label","edge","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","anchor","open","component","align","gutterBottom","Object","defaultValue","aria-labelledby","valueLabelDisplay","onChangeCommitted","step","scale","e","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.96fb0f2c.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Switch from \"@material-ui/core/Switch\";\nimport \"./App.css\";\n\nconst swapTime = 0;\nconst initColumnNbr = 100;\nconst highlightColor = \"#FFFFFF\"\n\nfunction shuffleArray(arr) {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n}\n\nconst timeScale = (x) => Math.round(2 ** x) - 1;\n\nconst sleep = (ms) => {\n  if (ms === 0) return new Promise((resolve) => setImmediate(resolve));\n\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nfunction hsvToRgbHex(h, s, v) {\n  let f = (n, k = (n + h / 60) % 6) =>\n    Math.round((v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)) * 255);\n\n  return (\n    \"#\" +\n    [f(5), f(3), f(1)]\n      .map((x) => {\n        const hex = x.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n      })\n      .join(\"\")\n  );\n}\n\nconst createArr = (columnNbr) => [...Array(columnNbr).keys()].map((a, idx) => { return {x: a, id: idx} })\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n\n    this.arr = createArr(initColumnNbr);\n    shuffleArray(this.arr);\n    this.state = {\n      isSorting: false,\n      areSettingsOpen: false,\n      chosenSortAlg: \"Insertion Sort\",\n      columnNbr: initColumnNbr,\n      swapTime: swapTime,\n      isDrawing: false,\n      canDraw: false,\n    };\n    this.sortingAlgorithms = {\n      \"Insertion Sort\": this.insertionSort,\n      \"Selection Sort\": this.selectionSort,\n      \"Cocktail Shaker Sort\": this.cocktailShakerSort,\n      \"Bubble Sort\": this.bubbleSort,\n      \"Radix Sort (LSD)\": this.lsdRadixSort,\n      \"Radix Sort (MSD)\": this.msdRadixSort,\n      \"Quick Sort\": this.quickSort,\n      \"Comb Sort\": this.combSort,\n      \"Shell Sort\": this.shellSort\n    };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    var parent = document.getElementById(\"canvas-wrapper\");\n\n    context.canvas.width = parent.offsetWidth;\n    context.canvas.height = parent.offsetHeight;\n\n    this.drawAll(context, this.arr);\n  }\n\n  removeHighlight = (arr) => {\n    this.highlight(arr, [])\n  }\n\n  highlight = (arr, indices) => {\n    if (!this.state.isSorting) throw Error(\"isSorting is false!\");\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (this.prevHighlightIndices) {\n      for (let idx of this.prevHighlightIndices) {\n        this.drawDiff(arr, idx, idx)\n      }\n    }\n    this.prevHighlightIndices = indices\n\n    for (let idx of indices) {\n      this.clearColumn(context, idx);\n      this.drawColumn(context, arr, idx, idx, highlightColor)\n    }\n  }\n\n  drawDiff = (arr, i1, i2) => {\n    if (!this.state.isSorting) throw Error(\"isSorting is false!\");\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    this.clearColumn(context, i1);\n    this.drawColumn(context, arr, i1, i2);\n  };\n\n  drawAll = (ctx, arr) => {\n    for (let i = 0; i < arr.length; i++) {\n      this.drawColumn(ctx, arr, i, i);\n    }\n  };\n\n  clearAll = (ctx) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  drawColumn = (ctx, arr, i1, i2, color) => {\n    const arrLength = arr.length;\n    const width = ctx.canvas.width / this.state.columnNbr;\n    const height = (ctx.canvas.height / this.state.columnNbr) * (arr[i2].x + 1);\n    const startX = width * i1;\n\n    ctx.fillStyle = color || hsvToRgbHex((360 * arr[i2].x) / arrLength, 1, 1);\n    this.fillRect(ctx, startX, 0, width, height);\n  };\n\n  fillRect = (ctx, startX, startY, width, height) => {\n    const ctxHeight = ctx.canvas.height;\n    ctx.fillRect(\n      startX,\n      Math.floor(ctxHeight) - Math.floor(startY) - Math.floor(height),\n      Math.floor(width),\n      Math.floor(height)\n    );\n  };\n\n  clearColumn = (ctx, idx) => {\n    const width = ctx.canvas.width / this.state.columnNbr;\n    const startX = width * idx;\n\n    this.clearRect(ctx, startX, width);\n  };\n\n  clearRect = (ctx, startX, width) => {\n    const ctxHeight = ctx.canvas.height;\n    ctx.clearRect(startX - 1, 0, Math.floor(width) + 2, Math.floor(ctxHeight));\n  };\n\n  sort = async (arr) => {\n    if (this.state.isSorting) return;\n\n    this.setState({ isSorting: true }, async () => {\n      try {\n        await this.sortingAlgorithms[this.state.chosenSortAlg](arr);\n      } catch (e) {\n        console.log(\"Sorting interrupted! Reason: \" + e);\n      }\n      this.stopSorting()\n    });\n  };\n\n  bubbleSort = async (arr) => {\n    var isSorted = false;\n    var sortedCount = 0\n    while (!isSorted) {\n      isSorted = true;\n      for (let i = 1; i < arr.length-sortedCount; i++) {\n        if (arr[i - 1].x > arr[i].x) {\n          this.drawAndSwap(arr, i - 1, i);\n          isSorted = false;\n        }\n        this.highlight(arr, [i-1, i]);\n        await sleep(this.state.swapTime);\n      }\n      \n      sortedCount++\n    }\n  };\n\n  combSort = async (arr) => {\n    var gap = this.state.columnNbr\n    const shrinkFactor = 1.3 \n    var isSorted = false\n    while (!isSorted) {\n      gap = Math.floor(gap/shrinkFactor)\n      if (gap <= 1) {\n        gap = 1\n        isSorted = true\n      }\n      for (let i = gap; i < arr.length; i++) {\n        if (arr[i - gap].x > arr[i].x) {\n          this.drawAndSwap(arr, i - gap, i);\n          isSorted = false;\n        }\n        this.highlight(arr, [i - gap, i]);\n        await sleep(this.state.swapTime);\n        \n      }\n    }\n  };\n\n  insertionSort = async (arr) => {\n    for (let i = 1; i < arr.length; i++) {\n      var j = i\n      while (j > 0 && arr[j - 1].x > arr[j].x) {\n        this.drawAndSwap(arr, j-1, j);\n        this.highlight(arr, [j - 1, j]);\n        await sleep(this.state.swapTime);\n        j--;\n      }\n    }\n  };\n\n  lsdRadixSort = async (arr, base = 4) => {\n    const buckets = Array(base);\n    const indexMap = new Map()\n    var shift = 0;\n    var isSorted = false;\n    while (!isSorted) {\n      for (let i = 0; i < base; i++) {\n        buckets[i] = [];\n      }\n      for (let i = 0; i < arr.length; i++) {\n        const index = (Math.floor(arr[i].x / base ** shift)) % base;\n        buckets[index].push(arr[i]);\n        indexMap[arr[i].id] = i\n      }\n      shift++;\n      var currentIndex = 0;\n\n      if (buckets[0].length === arr.length) {\n        break\n      }\n\n      for (let bucket of buckets) {\n        for (let a of bucket) {\n          const swapIndex = indexMap[a.id]\n          this.drawAndSwap(arr, currentIndex, swapIndex);\n          this.highlight(arr, [currentIndex, swapIndex])\n          await sleep(this.state.swapTime);\n\n          indexMap[arr[swapIndex].id] = indexMap[arr[currentIndex].id]\n          currentIndex++;\n        }\n      }\n    }\n  };\n\n  msdRadixSort = async (\n    arr, \n    base = 4,\n    start = 0,\n    end = this.state.columnNbr,\n    shift = Math.floor(Math.log(this.state.columnNbr)/Math.log(base))\n  ) => {\n    const buckets = Array(base);\n    const indexMap = new Map()\n\n    if (end-start === 0) return\n\n    for (let i = 0; i < base; i++) {\n      buckets[i] = [];\n    }\n    for (let i = start; i < end; i++) {\n      const index = (Math.floor(arr[i].x / base ** shift)) % base;\n      buckets[index].push(arr[i]);\n      indexMap[arr[i].id] = i\n    }\n\n    const bucketIndices = []\n\n    var currentIndex = start;\n\n    for (let bucket of buckets) {\n      const bucketStart = currentIndex\n      for (let a of bucket) {\n        const swapIndex = indexMap[a.id]\n        this.drawAndSwap(arr, currentIndex, swapIndex);\n        this.highlight(arr, [currentIndex, swapIndex])\n        await sleep(this.state.swapTime);\n\n        indexMap[arr[swapIndex].id] = indexMap[arr[currentIndex].id]\n        currentIndex++;\n      }\n      if (shift === 0) continue\n\n      bucketIndices.push([bucketStart, currentIndex])\n    }\n    for (const [bucketStart, bucketEnd] of bucketIndices) {\n      await this.msdRadixSort(arr, base, bucketStart, bucketEnd, shift-1)\n    }\n  };\n\n  selectionSort = async (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n      var curJ = i;\n      for (let j = i + 1; j < arr.length; j++) {\n        this.highlight(arr, [curJ, j])\n        await sleep(this.state.swapTime);\n        if (arr[j].x < arr[curJ].x) {\n          curJ = j;\n        }\n      }\n      if (curJ !== i) {\n        this.drawAndSwap(arr, curJ, i);\n        await sleep(this.state.swapTime);\n      }\n    }\n  };\n\n  cocktailShakerSort = async (arr) => {\n    var isSorted = false;\n    var shouldSortReversed = false;\n    var sortedCountRight = 0\n    var sortedCountLeft = 0\n    while (!isSorted) {\n      isSorted = true;\n      if (!shouldSortReversed) {\n        for (let i = 1+sortedCountLeft; i < arr.length-sortedCountRight; i++) {\n          if (arr[i - 1].x > arr[i].x) {\n            this.drawAndSwap(arr, i - 1, i);\n            isSorted = false;\n          }\n          this.highlight(arr, [i - 1, i])\n          await sleep(this.state.swapTime);\n        }\n        sortedCountRight++\n      } else {\n        for (let i = arr.length - 1 - sortedCountRight; i > sortedCountLeft; i--) {\n          if (arr[i - 1].x > arr[i].x) {\n            this.drawAndSwap(arr, i - 1, i);\n            isSorted = false;\n          }\n          this.highlight(arr, [i - 1, i])\n          await sleep(this.state.swapTime);  \n        }\n        sortedCountLeft++\n      }\n      shouldSortReversed = !shouldSortReversed;\n    }\n  };\n\n  //#region merge sort\n  /* In-place merge sort is complicated...\n  mergeSort = async (arr, start, end) => {\n    if (start >= end) return\n    if (end-start === 1) {\n      if (arr[start] > arr[end]) {\n        this.drawAndSwap(arr, start, end);\n        await sleep(this.state.swapTime);\n      }\n    }\n\n    const mid = Math.floor((start+end) / 2)\n    this.mergeSort(arr, start, mid)\n    this.mergeSort(arr, mid+1, end)\n    var i = start\n    var j = mid+1\n    while (i < mid && j < end) {\n      if (arr[i] > arr[j]) {\n        this.drawAndSwap(arr, i, j);\n        await sleep(this.state.swapTime);\n      }\n    }\n  }\n  */\n //#endregion\n\n  quickSort = async (arr, start = 0, end = this.state.columnNbr-1) => {\n    if (start >= end) return\n\n    const mid = Math.floor((start+end)/2)\n\n    if (arr[mid].x < arr[start].x) {\n      this.drawAndSwap(arr, start, mid)\n      this.highlight(arr, [start, mid])\n      await sleep(this.state.swapTime)  \n    }\n    if (arr[end].x < arr[start].x) {\n      this.drawAndSwap(arr, start, end)\n      this.highlight(arr, [start, end])\n      await sleep(this.state.swapTime)  \n    }\n    if (arr[mid].x < arr[end].x) {\n      this.drawAndSwap(arr, mid, end)\n      this.highlight(arr, [mid, end])\n      await sleep(this.state.swapTime)  \n    }\n\n    const pivot = arr[end].x\n    var i = start\n    for (var j = start; j < end; j++) {\n      if (arr[j].x < pivot) {\n        this.drawAndSwap(arr, i, j)\n        this.highlight(arr, [i, j])\n        await sleep(this.state.swapTime)\n        i++\n      }\n    }\n    this.drawAndSwap(arr, i, end)\n    this.highlight(arr, [i, end])\n    await sleep(this.state.swapTime)\n\n    await this.quickSort(arr, start, i-1)\n    await this.quickSort(arr, i+1, end)\n  }\n\n  shellSort = async (arr) => {\n    const gaps = [701, 301, 132, 57, 23, 10, 4, 1] // from https://oeis.org/A102549\n    for (let gap of gaps) {\n      if (gap > this.state.columnNbr) continue\n      for (let i = gap; i < this.state.columnNbr; i++) {\n        for (let j = i; j >= gap; j -= gap) {\n          if (arr[j - gap].x > arr[j].x) {\n            this.drawAndSwap(arr, j - gap, j);\n          }\n          else break\n\n          this.highlight(arr, [j-gap, j])\n          await sleep(this.state.swapTime);\n        }\n      }\n    }\n  }\n\n  stopSorting = () => {\n    if (this.prevHighlightIndices) {\n      this.removeHighlight(this.arr)\n    }\n    this.setState({ isSorting: false });\n    this.prevHighlightIndices = null\n  };\n\n  drawAndSwap = (arr, i1, i2) => {\n    this.drawDiff(arr, i1, i2);\n    this.drawDiff(arr, i2, i1);\n    this.swap(arr, i1, i2);\n  };\n\n  swap = (arr, i1, i2) => {\n    [arr[i1], arr[i2]] = [arr[i2], arr[i1]];\n  };\n\n  toggleDisplaySettings = () => {\n    this.setState({ areSettingsOpen: !this.state.areSettingsOpen });\n  };\n\n  closeDisplaySettings = () => {\n    this.setState({ areSettingsOpen: false });\n  };\n\n  chooseSortAlg = (event) => {\n    this.stopSorting();\n\n    this.setState({ chosenSortAlg: event.target.value });\n  };\n\n  changeColumnNbr = (event, value) => {\n    this.stopSorting();\n\n    this.arr = createArr(value);\n    this.setState({ columnNbr: value }, () => this.shuffleAndDraw());\n  };\n\n  changeSwapTime = (event, value) => {\n    this.setState({ swapTime: value });\n  };\n\n  resetAndDraw = () => {\n    this.arr = createArr(this.state.columnNbr);\n    this.shuffleAndDraw();\n  };\n\n  shuffleAndDraw = () => {\n    this.stopSorting();\n\n    shuffleArray(this.arr);\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    this.clearAll(context);\n    this.drawAll(context, this.arr);\n  };\n\n  drawOnCanvas = (event) => {\n    if (!this.state.isDrawing) return;\n\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n\n    const index = Math.floor(\n      ((event.clientX - rect.left) / canvas.width) * this.state.columnNbr\n    );\n    const height = Math.floor(\n      ((canvas.height - (event.clientY - rect.top)) / canvas.height) *\n        this.state.columnNbr\n    );\n\n    if (this.prevDrawIndex && this.prevDrawHeight) {\n      const indexIncr = Math.sign(index - this.prevDrawIndex);\n      let curHeight = this.prevDrawHeight;\n      for (\n        let i = this.prevDrawIndex + indexIncr;\n        i !== index;\n        i += indexIncr\n      ) {\n        curHeight +=\n          (height - this.prevDrawHeight) / Math.abs(index - this.prevDrawIndex);\n        this.arr[i].x = Math.round(curHeight);\n        this.clearColumn(context, i);\n        this.drawColumn(context, this.arr, i, i);\n      }\n    }\n\n    this.arr[index].x = height;\n    this.clearColumn(context, index);\n    this.drawColumn(context, this.arr, index, index);\n    this.prevDrawIndex = index;\n    this.prevDrawHeight = height;\n  };\n\n  startDrawOnCanvas = () => {\n    if (!this.state.canDraw) return;\n\n    this.stopSorting();\n    this.setState({ isDrawing: true });\n  };\n\n  endDrawOnCanvas = () => {\n    this.prevDrawIndex = null;\n    this.prevDrawHeight = null;\n    this.setState({ isDrawing: false });\n  };\n\n  toggleCanDraw = () => {\n    this.setState({ canDraw: !this.state.canDraw });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <AppBar position=\"relative\">\n            <Toolbar className=\"toolbar\">\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => this.sort(this.arr)}\n                  disableElevation\n                >\n                  Sort\n                </Button>\n              </div>\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={this.shuffleAndDraw}\n                  disableElevation\n                >\n                  Shuffle\n                </Button>\n              </div>\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={this.resetAndDraw}\n                  disableElevation\n                >\n                  Reset\n                </Button>\n              </div>\n              <div>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={this.state.canDraw}\n                      onChange={this.toggleCanDraw}\n                      name=\"canDraw\"\n                    />\n                  }\n                  label=\"Draw Mode\"\n                />\n              </div>\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                edge=\"end\"\n                className=\"open-drawer-button\"\n                onClick={this.toggleDisplaySettings}\n              >\n                <MenuIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n\n          <div\n            className=\"canvas-wrapper\"\n            id=\"canvas-wrapper\"\n            onClick={this.closeDisplaySettings}\n          >\n            <canvas\n              className=\"App-canvas\"\n              ref={this.canvasRef}\n              onMouseDown={this.startDrawOnCanvas}\n              onMouseMove={this.drawOnCanvas}\n              onMouseUp={this.endDrawOnCanvas}\n              onMouseLeave={this.endDrawOnCanvas}\n            />\n          </div>\n\n          <Drawer\n            variant=\"persistent\"\n            anchor=\"right\"\n            className=\"drawer\"\n            open={this.state.areSettingsOpen}\n          >\n            <div className=\"chevron-wrapper\">\n              <IconButton onClick={this.toggleDisplaySettings}>\n                <ChevronRightIcon />\n              </IconButton>\n            </div>\n            <div className=\"sortAlgChoice-wrapper\">\n              <FormControl component=\"fieldset\">\n                <Typography\n                  align=\"left\"\n                  variant=\"h6\"\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Sorting Algorithm\n                </Typography>\n                <RadioGroup\n                  className=\"choiceGroup\"\n                  aria-label=\"choiceGroup\"\n                  name=\"choiceGroup\"\n                  value={this.state.chosenSortAlg}\n                  onChange={this.chooseSortAlg}\n                >\n                  {Object.keys(this.sortingAlgorithms).map((v) => (\n                    <FormControlLabel\n                      className=\"choice\"\n                      value={v}\n                      key={v}\n                      control={<Radio />}\n                      label={v}\n                    />\n                  ))}\n                </RadioGroup>\n              </FormControl>\n            </div>\n            <div>\n              <Typography\n                align=\"left\"\n                variant=\"h6\"\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                # Columns\n              </Typography>\n              <div className=\"col-slider\">\n                <Slider\n                  defaultValue={initColumnNbr}\n                  aria-labelledby=\"discrete-slider\"\n                  valueLabelDisplay=\"auto\"\n                  min={10}\n                  max={1000}\n                  onChangeCommitted={this.changeColumnNbr}\n                />\n              </div>\n            </div>\n            <div>\n              <Typography\n                align=\"left\"\n                variant=\"h6\"\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                Time per swap (ms)\n              </Typography>\n              <div className=\"col-slider\">\n                <Slider\n                  defaultValue={swapTime}\n                  aria-labelledby=\"discrete-slider\"\n                  valueLabelDisplay=\"auto\"\n                  min={0}\n                  step={0.1}\n                  max={10}\n                  scale={(x) => timeScale(x)}\n                  onChangeCommitted={(e, value) =>\n                    this.changeSwapTime(e, timeScale(value))\n                  }\n                />\n              </div>\n            </div>\n          </Drawer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}